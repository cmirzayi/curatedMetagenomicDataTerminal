#!/usr/bin/env -S Rscript --vanilla

required.packages <- c("docopt", "curatedMetagenomicData", "SummarizedExperiment")
for (pkg in required.packages){
  if(!suppressPackageStartupMessages(require(pkg, character.only=TRUE))){
    stop(paste0("Make sure Bioconductor is installed (www.bioconductor.org/install), then type:\n
                BiocManager::install(\"", pkg, "\") \n
                from your R prompt."))
  }
}

doc <- "curatedMetagenomicData: command-line access to the curatedMetagenomicData R/Bioconductor package

Usage:
  curatedMetagenomicData [--metadata] [--counts] [--dryrun] [<NAME>]...
  curatedMetagenomicData [-mcd] [<NAME>]...
  curatedMetagenomicData -l | --list
  curatedMetagenomicData -h | --help

Options:
  -h --help      Show this. Note that arguments may optionally be quoted.
  -m --metadata     Include metadata in the first rows of the tsv file. This
includes participant data such as age, sex, and disease status, and the number
of sequencing reads. See explanations of metadata rows at
https://github.com/waldronlab/curatedMetagenomicDataCuration/blob/master/inst/extdata/template.csv.
  -c --counts    Multiply MetaPhlAn3 and HUMAnN3 relative abundances by read
depth, then round to the nearest integer. If it is not set, return MetaPhlAn3
and HUMAnN3 results as-is.
  -d --dryrun    Show which datasets would be downloaded, then exit normally
without downloading.
  -l --list      List all datasets available then exit.
  <NAME>...      One or more names curatedMetagenomicData datasets (See
reference manual for list of all datasets). Standard Unix globbing is
supported (such as * for wildcard), however in this case NAME argument
MUST BE QUOTED.

The script will produce one tab-separated tsv file per dataset requested.
The output files are the name of the dataset name with '.tsv' appended.

Examples:
  curatedMetagenomicData -m -c 2021-03-31.LomanNJ_2013.relative_abundance

Will produce a file 2021-03-31.LomanNJ_2013.relative_abundance.tsv providing MetaPhlAn3
taxonomic abundance multiplied by read depth, with metadata about study
participants and sequencing information in the first several rows of the file.

  curatedMetagenomicData 2021-03-31.LomanNJ_2013.relative_abundance 2021-03-31.LomanNJ_2013.pathway_coverage

Will return two files, without clinical / sequencing metadata.

  curatedMetagenomicData -d \"*\"                 #Will show all available datasets (don't download)
  curatedMetagenomicData -d \"*HMP*\"              #Will show all HMP data products (don't download)
  curatedMetagenomicData -d \"*HMP*relative_abundance\"   #Will show all HMP relative abundance data products (don't download)
  curatedMetagenomicData -d \"*HMP*\" \"*Loman*\"   #Will show all HMP and Loman data products (don't download)
  curatedMetagenomicData -d \"*relative_abundance*\"  #Will show all relative abundance tables (don't download)

Output: The file names of datasets to be created are returned to standard output.
"

input <- docopt(doc)
if(length(input$NAME) == 0 & !input$list)
  docopt(doc, args="-h")

if(input$list){
  input$NAME <- "*"
  input$dryrun <- TRUE
}

requested.datasets <- input$NAME
all.datasets <- curatedMetagenomicData(pattern = ".*", dryrun = TRUE, print = FALSE, counts = FALSE)

regex <- paste(glob2rx(requested.datasets), collapse="|")
matched.datasets <- grep(regex, all.datasets, value=TRUE)

message("Datasets to be downloaded:")
cat(paste0(matched.datasets, ".tsv\n"), file=stdout())

if(!any(matched.datasets %in% all.datasets))
  stop("NAME arguments do not match any available datasets.")

for (i in seq_along(matched.datasets)){
  if(input$dryrun) break

  message(paste0("Working on ", matched.datasets[i]))

  if(input$counts){
    se <- curatedMetagenomicData(pattern = matched.datasets[i], dryrun = FALSE, print = FALSE, counts = TRUE)
  }else{
    se <- curatedMetagenomicData(pattern = matched.datasets[i], dryrun = FALSE, print = FALSE, counts = FALSE)
  }

  edat <- assay(se)

  if(input$metadata){
    cdat <- t(as.matrix(colData(se)))
    edat <- rbind(cdat, edat)
  }

  write.table(edat, file = paste0(matched.datasets[i], ".tsv"),
              col.names=NA, sep = "\t", quote = FALSE)
}
